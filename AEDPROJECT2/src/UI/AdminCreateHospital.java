/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.City;
import Model.DoctorLogs;
import Model.Hospital;
import Model.HospitalLogs;
import Model.Patient;
import Model.PatientLogs;
import Model.Person;
import Model.PersonLogs;
import Model.User;
import Model.UserLogs;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSplitPane;

/**
 *
 * @author arpitabhagat
 */
public class AdminCreateHospital extends javax.swing.JPanel {

    /**
     * Creates new form AdminCreateHospital
     */
    Patient patient;
    Person person;
    User user;
    PersonLogs personLogs;
    PatientLogs patientLogs;
    UserLogs userLogs;
    DoctorLogs doctorLogs;
    JSplitPane jSplitPane1;
    HospitalLogs hospitalLogs;
    public AdminCreateHospital(PersonLogs personLogs,UserLogs userLogs,JSplitPane jSplitPane,PatientLogs patientLogs,DoctorLogs doctorLogs,HospitalLogs hospitalLogs) {
        initComponents();
        this.patientLogs = patientLogs;
        this.personLogs = personLogs;
        this.userLogs = userLogs;
        this.doctorLogs = doctorLogs;
        this.jSplitPane1 = jSplitPane;
        this.hospitalLogs = hospitalLogs;
        generateDropdownCity();
        generateDropdownCommunity();
        updateTable();
    }
    public void generateDropdown() {
        ArrayList<String> cityDropdown = new ArrayList<>();
        for (String cityValue : City.cityValues) {
            cityDropdown.add(String.valueOf(cityValue));
        }
        String[] citySDropdown = cityDropdown.toArray(new String[cityDropdown.size()]);
        DefaultComboBoxModel<String> yearsSDropdownModel = new DefaultComboBoxModel<>(citySDropdown);
        cbCity.setModel(yearsSDropdownModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbCommunity = new javax.swing.JComboBox<>();
        txtBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCity = new javax.swing.JTable();
        txtAdd = new javax.swing.JButton();
        cbCity = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtHospital = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        txtBack.setText("Back");
        txtBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBackActionPerformed(evt);
            }
        });

        tblCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hospital", "City", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCity);

        txtAdd.setText("Add");
        txtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddActionPerformed(evt);
            }
        });

        cbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCityActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Community");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Hospital");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Hospital");

        txtHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHospitalActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("City");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(185, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtBack, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbCity, 0, 138, Short.MAX_VALUE)
                                    .addComponent(cbCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtHospital)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(212, 212, 212))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(380, 380, 380))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(txtBack, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbCity)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbCommunity)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(txtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBackActionPerformed
        // TODO add your handling code here:
        AdminHealthCareOverview cP = new AdminHealthCareOverview(personLogs,userLogs,jSplitPane1,patientLogs,doctorLogs,hospitalLogs);
        jSplitPane1.setRightComponent(cP);
    }//GEN-LAST:event_txtBackActionPerformed

    private void txtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddActionPerformed
        // TODO add your handling code here:
        Hospital hospital = hospitalLogs.addNewHospital();
      hospital.setHospitalName(txtHospital.getText());
      hospital.getCity().setCity(this.cbCity.getSelectedItem().toString());
      hospital.getCommunity().setCommunityName(this.cbCommunity.getSelectedItem().toString());
      updateTable();
        //                String errorMessage = "";
        //        Community community = new Community();
        //
        //        if (cbCity.getSelectedIndex() == -1) {
            //            errorMessage += "Please select City! \n";
            //        }
        //        String communityErrorMessage = community.validateCommunityName(cbCommunity.getText());
        //        errorMessage += communityErrorMessage;
        //
        //        if (community.alreadtExists(cbCity.getSelectedItem().toString(), cbCommunity.getText())) {
            //            errorMessage += "Community already registered with the selected City \n";
            //        }
        //        if (errorMessage.length() != 0) {
            //            JOptionPane.showMessageDialog(this, errorMessage, "Add City", ERROR_MESSAGE);
            //        } else {
            //            community.communityName = cbCommunity.getText();
            //            community.city = cbCity.getSelectedItem().toString();
            //            community.createdAt = new Date();
            //            City.allCities.add(community);
            //            updateTable();
            //            JOptionPane.showMessageDialog(this, "City added successfully!", "Addition", INFORMATION_MESSAGE);
            //        }
        
    }//GEN-LAST:event_txtAddActionPerformed

    private void cbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCityActionPerformed
        // TODO add your handling code here:
        generateDropdownCommunity();
        public void updateTable() {
    DefaultTableModel model = (DefaultTableModel) tblCity.getModel();
    model.setRowCount(0);
    
    for (Hospital eh : hospitalLogs.getHospitalLogs())
    {
        Object[] row = new Object[3];
        row[0] = eh;
        row[1] = eh.getCommunity().getCommunityName();
        row[2] = eh.getCity().city;
            model.addRow(row);
        
    }


    }
    public void generateDropdownCity() {
        ArrayList<String> cityDropdown = new ArrayList<>();
        for (String cityValue : City.cityValues) {
            cityDropdown.add(String.valueOf(cityValue));
        }
        String[] citySDropdown = cityDropdown.toArray(new String[cityDropdown.size()]);
        DefaultComboBoxModel<String> yearsSDropdownModel = new DefaultComboBoxModel<>(citySDropdown);
        cbCity.setModel(yearsSDropdownModel);
    }

    public void generateDropdownCommunity() {
        ArrayList<String> communityDropdown = new ArrayList<>();
        City.allCities.stream().filter(communityValue -> (communityValue.city == null ? cbCity.getSelectedItem().toString() == null : communityValue.city.equals(cbCity.getSelectedItem().toString()))).forEachOrdered(communityValue -> {
            communityDropdown.add(String.valueOf(communityValue.communityName));
        });
        String[] citySDropdown = communityDropdown.toArray(new String[communityDropdown.size()]);
        DefaultComboBoxModel<String> yearsSDropdownModel = new DefaultComboBoxModel<>(citySDropdown);
        this.cbCommunity.setModel(yearsSDropdownModel);
    }
    }//GEN-LAST:event_cbCityActionPerformed

    private void txtHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHospitalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHospitalActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbCity;
    private javax.swing.JComboBox<String> cbCommunity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCity;
    private javax.swing.JButton txtAdd;
    private javax.swing.JButton txtBack;
    private javax.swing.JTextField txtHospital;
    // End of variables declaration//GEN-END:variables
}
